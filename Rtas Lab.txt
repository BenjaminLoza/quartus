1)Los LEs(Logica Elemental) son constituidos por:
	Look Up Tables
	Logica de Acarreo
	Mulitplexores
	Registros
Los LABs (Logic Array Blocks) estan constituidos por multiples LEs
2)El Nios II es un procesador embebido 
3)Los IP cores son entidades previamente hechas que ocupan bloques Logicos y los Loques embebidos son bloques que vienen en la fpga para su uso,son mas eficientes que usar bloques logicos por como fueron fabricados para su uso especifico no programable.
4)El FPGA Cyclone III utiliza SRAM (Static Random-Access Memory) como tipo de celda de programaci√≥n.
5)
library ieee;
use ieee.std_logic_1164.all;

entity jkffi is
    port(
        clk,j,k,reset   : in  std_logic;
        q     : out std_logic
   	 );
end;

architecture behavior of jkffi is
signal ins:std_logic_vector(1 downto 0);
signal qn:std_logic;
begin
ins<= j&k;
    process (clk, reset)
    begin
        if reset = '1' then
            q	<= '0';
        elsif rising_edge(clk) then
            case (ins) is
                when "00" =>
                    qn <= qn;
                when "01" =>
                    qn <= '0';
                when "10" =>
                    qn <= '1';
                when "11" =>
                    qn <= not qn;
            end case;
        end if;
	 q<=qn;
    end process;
end architecture;d;
6)
library ieee;
use ieee.std_logic_1164.all;

entity SUMADOR_COMPLETO is
    port(
        A,B,Cin   : in  std_logic;
        Sum,Cout     : out std_logic
   	 );
end;

architecture behaviour of SUMADOR_COMPLETO is
begin
	Sum<= A xor B xor Cin;              
	Cout<= (A and B) or (A and Cin) or (B and Cin);  
end;
7)
library ieee;
use ieee.std_logic_1164.all;

entity tsSUMADOR_COMPLETO is
end tsSUMADOR_COMPLETO;

architecture behavior of tsSUMADOR_COMPLETO is

    signal A, B, Cin : std_logic := '0';
    signal Sum, Cout : std_logic;

    component SUMADOR_COMPLETO
        port(
            A, B, Cin   : in  std_logic;
            Sum, Cout   : out std_logic
        );
    end component;

begin
    uut: SUMADOR_COMPLETO
        port map (
            A => A,
            B => B,
            Cin => Cin,
            Sum => Sum,
            Cout => Cout
        );

    process
    begin
        A <= '0'; B <= '0'; Cin <= '0';wait for 10 ns;
        A <= '0'; B <= '0'; Cin <= '1';wait for 10 ns;
        A <= '0'; B <= '1'; Cin <= '0';wait for 10 ns;
        A <= '0'; B <= '1'; Cin <= '1';wait for 10 ns;
        A <= '1'; B <= '0'; Cin <= '0';wait for 10 ns;
        A <= '1'; B <= '0'; Cin <= '1';wait for 10 ns;
        A <= '1'; B <= '1'; Cin <= '0';wait for 10 ns;
        A <= '1'; B <= '1'; Cin <= '1';wait for 10 ns;
        wait;
    end process;
end architecture;
